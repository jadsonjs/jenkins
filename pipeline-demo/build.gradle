/**
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 *
 *
 *  Basic Continuous Delivery Script
 */

plugins {
	id 'org.springframework.boot' version '2.3.3.RELEASE'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
	id "org.sonarqube" version "3.0"                   // code quality
	id "jacoco"                                        // CI metrics
	id "org.flywaydb.flyway" version "6.5.7"           // database migration
	id 'org.hidetake.ssh' version '2.10.1'             // deploy application by ssh
	id "com.heroku.sdk.heroku-gradle" version "2.0.0"  // deploy application on heroku
}


group = 'br.com.jadson'
description = 'Example of project where use Continuous Delivery'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}

	runtimeOnly 'org.postgresql:postgresql'

	testCompile group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.6.2'
}

test {
	useJUnitPlatform()
}

// sonarqube properties
sonarqube {
	properties {
		property "sonar.sourceEncoding", "UTF-8"
		property 'sonar.host.url', System.getProperty('sonarUrl')
		property "sonar.login", System.getProperty('sonarToken')
	}
}

// jacoco covarege plugin configuration
jacocoTestReport {
	dependsOn test
	reports {
		xml.enabled true
	}
}

// database migration plugin.

flyway {

	driver = "org.postgresql.Driver"
	url = 'jdbc:postgresql://localhost:5432/'
	user = ''
	password = ''
	// The default schema managed by Flyway.
	schemas = ['public']
	createSchemas = false
	// where the migration scripts will be save.
	locations = ["filesystem:/$projectDir/src/main/resources/db/migration"]
	// the name of table to save migration data
	table = "flyway_schema_history"
	encoding = 'UTF-8'
	baselineOnMigrate = true

}

/// deploy task
task deploySSH {

	doLast {

		def deployServer       =  System.getProperty("deployServer")
		def deployDirectory    =  System.getProperty("deployDirectory")
		def deployPort         =  System.getProperty("deployPort")
		def deployUser         =  System.getProperty("deployUser")
		def deployPKFilePath   =  System.getProperty("deployPKFilePath")
		def restartTomcat      =  System.getProperty("restartTomcat")
		def restartSpringBoot  =  System.getProperty("restartTomcat")

		ssh.remotes {
			webServer {
				host = deployServer
				port = new Integer(deployPort)
				user = deployUser
				//password = deploy_system_password
				identity = new File(deployPKFilePath) // file with a private key
				knownHosts = allowAnyHosts
			}
		}

		ssh.run {
			session(ssh.remotes.webServer) {

				println " ..... fazendo deploy de \""+"$rootProject.name"+".jar\" em: "+deployUser+"@"+deployServer+":"+deployDirectory+" -P "+deployPort

				put from: "$buildDir/libs/*.jar", into: deployDirectory+'/'+"$rootProject.name"+'.jar'

				if( restartTomcat.toBoolean() ) {
					println " ..... iniciando tomcat "
					execute 'sudo service tomcat restart'
				}

				if( restartSpringBoot.toBoolean() ) {
					println " ..... iniciando aplicação "
					execute 'java -jar pipeline-demo.jar'
				}
			}
		}
	}
}



heroku {
	appName = "jadson-pipe-line-demo"
	includes = ["build/libs/pipeline-demo-0.0.1-SNAPSHOT.jar"]
	includeBuildDir = false
	jdkVersion = 11
	processTypes(
		web: 'java -Dserver.port=$PORT $JAVA_OPTS -jar build/libs/pipeline-demo-0.0.1-SNAPSHOT.jar'
	)
}






