/**
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 *
 *
 *  Basic Continuous Delivery Script
 */

plugins {
	id 'org.springframework.boot' version '2.3.3.RELEASE'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
	id "org.sonarqube" version "3.0"           // code quality
	id "jacoco"                                // CI metrics
	id "org.flywaydb.flyway" version "6.5.7"   // database migration
}

group = 'br.com.jadson'
description = 'Example of project where use Continuous Delivery'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}

	runtimeOnly 'org.postgresql:postgresql'

	testCompile group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.6.2'
}

test {
	useJUnitPlatform()
}

// sonarqube properties
sonarqube {
	properties {
		property "sonar.sourceEncoding", "UTF-8"
		property 'sonar.host.url', project.property('sonarUrl')
		property "sonar.login", project.property('sonarToken')
	}
}

// jacoco covarege plugin configuration
jacocoTestReport {
	dependsOn test
	reports {
		xml.enabled true
	}
}

// database migration plugin.

flyway {

	driver = "org.postgresql.Driver"
	url = 'jdbc:postgresql://localhost:5432/';
	user = ''
	password = ''
	// The default schema managed by Flyway.
	schemas = ['public']
	createSchemas = false
	// where the migration scripts will be save.
	locations = ["filesystem:src/main/resources/db/migration"]
	// the name of table to save migration data
	table = "flyway_schema_history"
	encoding = 'UTF-8'
	baselineOnMigrate = true

}




